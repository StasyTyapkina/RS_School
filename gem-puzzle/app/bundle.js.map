{"version":3,"sources":["webpack://webpack/./scripts/board_generator.js","webpack://webpack/./scripts/chip.js","webpack://webpack/./scripts/index.js","webpack://webpack/./scripts/info_section.js","webpack://webpack/./scripts/puzzle.js","webpack://webpack/webpack/bootstrap","webpack://webpack/webpack/runtime/define property getters","webpack://webpack/webpack/runtime/hasOwnProperty shorthand","webpack://webpack/webpack/runtime/make namespace object","webpack://webpack/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;;AAEA;AACA,qEAAqE;;AAErE,qCAAqC,0BAA0B;AAC/D,oCAAoC,yBAAyB,IAAI;AACjE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA,S;AACA;;AAEA;;AAEA,uBAAuB,sBAAsB;AAC7C;AACA,4D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,kB;AACA,c;AACA;AACA,U;;AAEA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,iB;AACA,a;AACA;AACA;AACA;AACA,CAAC;;AAEe;;;;;;;;;;;;;;;;;;;ACtFiC;AACrB;AACQ;;;;;;;;;;;;;;;;;;;ACFpC;AACA;;AAEA;AACA,+C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,iF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;;;AAGX;AACA,gC;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;;AAEzC,yB;AACA;AACA,+C;AACA,sEAAsE,aAAa;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,KAAK;;;AAGL;AACA;AACA;;AAEA;AACA,sEAAsE,aAAa;AACnF;;AAEA;AACA;AACA,sEAAsE,aAAa;AACnF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4B;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;ACrID;AACA;AACA;AACA;AACA,0C;AACA;AACA,sD;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,qC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa;AACb;;AAEA;AACA;AACA,2DAA2D,QAAQ;AACnE,0DAA0D,QAAQ;AAClE;;;AAGA;AACA;;AAEA,uBAAuB,yBAAyB;AAChD;AACA,+B;AACA,uCAAuC;;AAEvC;AACA,uC;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;;AAGb;AACA;AACA;AACA;AACA,0E;AACA;;AAEA;AACA;AACA,+D;AACA;;AAEA;AACA;AACA,wD;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,2BAA2B;AACnD,uBAAuB,2BAA2B;;AAElD;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,uBAAuB,4BAA4B;AACnD;AACA;AACA;AACA;;AAEA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yCAAyC,2BAA2B;AACpE,wCAAwC,0BAA0B;;AAElE;AACA,qCAAqC;AACrC,mCAAmC;AACnC,+BAA+B;AAC/B,6BAA6B;AAC7B,8B;AACA,4BAA4B;;AAE5B;AACA;;;AAGA;AACA;AACA;AACA;AACA,2EAA2E,cAAc,iBAAiB;;AAE1G,eAAe;AACf;;AAEA;AACA;AACA;;AAEA,CAAC;;;AAGD;AACkB;;;;;;;;;;UClLlB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"bundle.js","sourcesContent":["class BoardGenerator{\r\n    generate(maxSize) {\r\n       const numbers = [...Array(maxSize).keys()]\r\n           .sort(() => Math.random() - 0.5);\r\n       \r\n       return numbers;\r\n   }\r\n}\r\n\r\nexport { BoardGenerator };","/*declaration of chip*/ \r\nclass Chip{\r\n    constructor(value, left, top, field){\r\n        this.element = document.createElement('div');\r\n        this.element.className='cell';\r\n        this.element.innerHTML = value; //выводим номера ячеек\r\n        this.value = value;\r\n        this.left = left;\r\n        this.top = top;\r\n\r\n        field.append(this.element);\r\n        this.cellSize = document.querySelector('.cell').offsetWidth ;//размер ячейки\r\n      \r\n        this.element.style.left = `${this.left * this.cellSize}px`;\r\n        this.element.style.top = `${this.top * this.cellSize}px`; //применяем стили с позицией для ячеек\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.value === 0;\r\n    }\r\n}\r\n\r\n/*declaration of array with chips*/ \r\nclass ChipList{\r\n    constructor(){\r\n        this.list = [];\r\n    }\r\n\r\n     getEmptyCell() {\r\n        for (let i = 0; i <  this.list.length; i++){\r\n            if ( this.list[i].isEmpty()){\r\n                return  this.list[i];\r\n            }\r\n        } \r\n     }\r\n     \r\n     hideEmptyChip(){\r\n\r\n        for (let i = 0; i < this.list.length; i++){\r\n            if (this.list[i].isEmpty() === true){\r\n                this.list[i].element.style.display = \"none\";  \r\n               break;\r\n            }\r\n        }\r\n     }\r\n\r\n     isSorted(){\r\n         let size = Math.sqrt(this.list.length);\r\n         let emptyChip = null;\r\n\r\n         for (let i = 0; i < this.list.length; i++){\r\n             if (this.list[i].isEmpty() === true){\r\n                emptyChip = this.list[i];\r\n                break;\r\n             }\r\n         }\r\n\r\n        let emptyCoordinate = size * emptyChip.top + emptyChip.left\r\n        if(emptyCoordinate === 0){\r\n             for (let i = 1; i < this.list.length; i++){\r\n                 let currentChip = this.list[i];\r\n                 if (currentChip.value === 0){\r\n                     continue;\r\n                 }\r\n                 if (currentChip.value !== size * currentChip.top + currentChip.left){\r\n                     return false;\r\n                 } \r\n             } \r\n             return true;\r\n         } \r\n         \r\n         if (emptyCoordinate === this.list.length - 1){\r\n             for (let i = 0; i < this.list.length - 1; i++){\r\n                let currentChip = this.list[i];\r\n                if (currentChip.value === 0){\r\n                    continue;\r\n                }\r\n                if (currentChip.value !== size * currentChip.top + currentChip.left + 1){\r\n                    return false;\r\n                } \r\n            } \r\n            return true;\r\n        }\r\n    }\r\n} //end class ChipList\r\n\r\nexport { Chip };\r\n","import {BoardGenerator} from './board_generator';\r\nimport {Chip} from './chip';\r\nimport {Info} from './info_section';\r\nimport {Puzzle} from './puzzle'; ","class Info{\r\n    constructor () {\r\n       \r\n        this._infoField = document.createElement('div');\r\n        this._infoField.className='info_field'; \r\n        document.body.appendChild(this._infoField);\r\n        \r\n        this.label = document.createElement('label');\r\n        this.label.setAttribute('for', \"fieldSize\")\r\n        this.label.innerHTML = `Размер игрового поля <br>(min 3х3, max 8х8): `;\r\n        this._infoField.appendChild(this.label);\r\n\r\n        this.input = document.createElement('input');\r\n        this.input.type = 'number';\r\n        this.input.min = '2';\r\n        this.input.max = '8';\r\n        this.input.setAttribute('id','fieldSize') ;\r\n        this.input.value = '4';\r\n        this._infoField.appendChild(this.input);\r\n       \r\n        \r\n        this.button = document.createElement('button');\r\n        this.button.id = 'generateField';\r\n        this.button.innerHTML = `New game`;\r\n        this._infoField.appendChild(this.button);\r\n\r\n        this.buttonSound = document.createElement('button');\r\n        this.buttonSound.sound = false;\r\n        this.buttonSound.classList.add('buttonSound',\"buttonSound--activatable\"); \r\n        this.buttonSound.classList.toggle(\"buttonSound--active\",  this.buttonSound.sound);\r\n        this.buttonSound.innerHTML = `Sound`;\r\n        this.buttonSound.title = \"Нажмите, чтобы включить звук при кликах\"\r\n        this._infoField.appendChild(this.buttonSound);\r\n\r\n        this.buttonSound.addEventListener('click', () => {\r\n            this._toggleSound();\r\n            this.buttonSound.classList.toggle(\"buttonSound--active\",   this.buttonSound.sound);\r\n           \r\n            if (this.buttonSound.sound) {\r\n              this.audioClick.play();\r\n            }\r\n          });\r\n\r\n\r\n        this._timer = document.createElement('div');\r\n        this._timer.id ='timer'; \r\n        this._infoField.appendChild(this._timer);\r\n        this.hour = 0;\r\n        this.min = 0;\r\n        this.sec = 0;\r\n        setInterval(() => { this.tick() }, 1000);\r\n\r\n        this.counter = 0; \r\n        this._counterTitle = document.createElement('div');\r\n        this._counterTitle.className='counter'; \r\n        this._counterTitle.innerHTML = `<span class=\"moves\"> Ходов: ${this.counter}</span>`;\r\n        this._infoField.appendChild(this._counterTitle);\r\n\r\n        this.audio = document.createElement('audio');\r\n        this.audio.controls = true;\r\n        this.audio.autoplay = true;\r\n        this.audio.volume = 0.3;\r\n        this.audio.loop = true;\r\n        this.audio.src = \"sounds/wave.mp3\";\r\n        this._infoField.appendChild(this.audio);\r\n\r\n        this.audioClick = document.createElement('audio');\r\n        this.audioClick.id= \"audio\"\r\n        this.audioClick.src = \"sounds/tink.mp3\";\r\n        document.body.appendChild(this.audioClick);\r\n    \r\n    } //end constructor\r\n\r\n\r\n    _toggleSound() {\r\n        this.buttonSound.sound = !this.buttonSound.sound\r\n      }\r\n\r\n    updateCounter(){\r\n        this._counterTitle.innerHTML = `<span class=\"moves\"> Ходов: ${this.counter}</span>`;\r\n    }\r\n\r\n    resetCounter(){\r\n        this.counter = 0;\r\n        this._counterTitle.innerHTML = `<span class=\"moves\"> Ходов: ${this.counter}</span>`;\r\n    }\r\n\r\n    resetTime(){\r\n        this.hour = 0;\r\n        this.min = 0;\r\n        this.sec = 0;\r\n    }\r\n\r\n    tick() {\r\n        this.sec++;\r\n        if (this.sec >= 60) { \r\n            this.min++;\r\n            this.sec = this.sec - 60;\r\n        }\r\n        if (this.min >= 60) {\r\n            this.hour++;\r\n            this.min = this.min - 60;\r\n        }\r\n        if (this.sec < 10) { \r\n            if (this.min < 10) {\r\n                if (this.hour < 10) {\r\n                    document.getElementById('timer').innerHTML = \"Время: \" +'0' + this.hour + ':0' + this.min + ':0' + this.sec;\r\n                } else {\r\n                    document.getElementById('timer').innerHTML = \"Время: \" + this.hour + ':0' + this.min + ':0' + this.sec;\r\n                }\r\n            } else {\r\n                if (this.hour < 10) {\r\n                    document.getElementById('timer').innerHTML = \"Время: \" +'0' + this.hour + ':' + this.min + ':0' + this.sec;\r\n                } else {\r\n                    document.getElementById('timer').innerHTML = \"Время: \" + this.hour + ':' + this.min + ':0' + this.sec;\r\n                }\r\n            }\r\n        } else {\r\n            if (this.min < 10) {\r\n                if (this.hour < 10) {\r\n                    document.getElementById('timer').innerHTML = \"Время: \" +'0' + this.hour + ':0' + this.min + ':' + this.sec;\r\n                } else {\r\n                    document.getElementById('timer').innerHTML = \"Время: \" + this.hour + ':0' + this.min + ':' + this.sec;\r\n                }\r\n            } else {\r\n                if (this.hour < 10) {\r\n                    document.getElementById('timer').innerHTML = \"Время: \" +'0' + this.hour + ':' + this.min + ':' + this.sec;\r\n                } else {\r\n                    document.getElementById('timer').innerHTML = \"Время: \" + this.hour + ':' + this.min + ':' + this.sec;\r\n                }\r\n            }\r\n        }\r\n    }\r\n} //end class Info\r\n\r\nexport { Info };","/*declaration of empty board*/ \r\nclass Puzzle{\r\n    constructor () {\r\n        this._infoField = document.createElement('div');\r\n        this._infoField.className='field'; \r\n        document.body.appendChild(this._infoField);\r\n        this.field = document.querySelector('.field'); \r\n        \r\n        \r\n        this.generator = new BoardGenerator();\r\n        this.info = new Info();\r\n        this.cells = new ChipList();\r\n\r\n        this.size = 4;\r\n        this.numbers = this.generator.generate(this.size * this.size);\r\n        this._initialize();\r\n        this._createField(this.size); \r\n    }\r\n\r\n     _initialize () {\r\n        document.getElementById('fieldSize')\r\n            .addEventListener('input', () => {\r\n                let value = document.getElementById('fieldSize')\r\n                this.size = value.valueAsNumber;\r\n            })\r\n        document.getElementById('generateField')\r\n            .addEventListener('click', () => {\r\n                this._removeField()\r\n                this._createField(this.size)\r\n                \r\n                this.info.resetCounter()\r\n                this.info.resetTime()\r\n                this.changeFieldSize()\r\n\r\n                if (this.info.buttonSound.sound) {\r\n                    this.info.audioClick.play();\r\n                  }\r\n                \r\n            });\r\n    }\r\n    \r\n    changeFieldSize(){\r\n        let newSize = this.size * this.cells.list[0].cellSize;\r\n        document.querySelector(\".field\").style.height = `${newSize}px`;\r\n        document.querySelector(\".field\").style.width = `${newSize}px`;\r\n    }\r\n    \r\n\r\n    _createField (n) {\r\n        this.numbers = this.generator.generate(n * n);\r\n       \r\n        for (let i = 0; i < this.numbers.length; i++){\r\n            const value = this.numbers[i];\r\n            const left = i % n; \r\n            const top = (i - left) / n; //вычисляем ряд и столбик для ячейки\r\n\r\n            let chip = new Chip(value, left, top, this.field);\r\n            this.cells.list.push(chip); \r\n           \r\n            \r\n            chip.element.addEventListener('click', () => {\r\n                if (this.info.buttonSound.sound) {\r\n                    this.info.audioClick.play();\r\n                  }\r\n\r\n                this._move(i);\r\n            }) \r\n        \r\n\r\n            /*chip.element.onmousedown = (event) => {\r\n                console.log(\"MOUSE DOWN\")\r\n                chip.element.style.position = 'absolute';\r\n                chip.element.style.zIndex = 1000;\r\n                let fieldCoordinates = this.field.getBoundingClientRect();   \r\n                console.log(\"FIELD ABSOLUTE\", fieldCoordinates.left, fieldCoordinates.top)\r\n        \r\n                let mouseTransformedX = event.pageX - fieldCoordinates.left;\r\n                let mouseTransformedY = event.pageY - fieldCoordinates.top;\r\n                console.log(\"MOUSE\", event.pageX, event.pageY);  \r\n                console.log(\"MOUSE TRANSFORMED\", mouseTransformedX, mouseTransformedY)\r\n        \r\n                let chipX = parseInt(chip.element.style.top);\r\n                let chipY = parseInt(chip.element.style.left);\r\n                console.log(\"CHIP BEGIN\", chipX, chipY);  \r\n  \r\n                let shiftX = mouseTransformedX - chipX;\r\n                let shiftY = mouseTransformedY - chipY;\r\n        \r\n                console.log(\"SHIFT\", shiftX, shiftY)\r\n\r\n                if (this.info.buttonSound.sound) {\r\n                    this.info.audioClick.play();\r\n                  }\r\n                chip.element.onmousemove = (event) => {\r\n                     this._onMouseMove(i, event, shiftX, shiftY); \r\n                }\r\n            }\r\n\r\n            chip.element.onmouseup = () => {\r\n                console.log(\"MOUSE UP\")\r\n                chip.element.onmousemove = null;\r\n            }\r\n\r\n            chip.element.ondragstart = function() {\r\n                return false;\r\n            };*/\r\n        }\r\n        this.cells.hideEmptyChip();\r\n    }\r\n\r\n    /*_onMouseMove(index, event, shiftX, shiftY){\r\n        \r\n        let chip = this.cells.list[index];\r\n\r\n        let fieldCoordinates = this.field.getBoundingClientRect();\r\n        console.log(\"FIELD ABSOLUTE INSIDE\", fieldCoordinates.left, fieldCoordinates.top) \r\n        let mouseTransformedX = event.pageX - fieldCoordinates.left;\r\n        let mouseTransformedY = event.pageY - fieldCoordinates.top;\r\n        console.log(\"MOUSE TRANSFORMED INSIDE\", mouseTransformedX, mouseTransformedY)\r\n\r\n        let diffX  = `${mouseTransformedX - shiftX}`\r\n        let diffY = `${mouseTransformedY - shiftY}`\r\n\r\n        console.log(\"DIFF\", diffX, diffY)\r\n\r\n        chip.element.style.left = diffX + 'px';\r\n        chip.element.style.top =  diffY + 'px';\r\n    }*/\r\n\r\n    _removeField () {\r\n        for (let i = 0; i < this.cells.list.length; i++){\r\n            this.field.removeChild(this.cells.list[i].element);\r\n        }\r\n        this.cells.list = [];\r\n    }\r\n\r\n    _move (index) {\r\n        let chip = this.cells.list[index]; //получаем доступ к i ячейке\r\n        //проверка соседние ли ячейки\r\n        let empty = this.cells.getEmptyCell();\r\n        const leftDiff = Math.abs(empty.left -  chip.left);\r\n        const topDiff = Math.abs(empty.top -  chip.top);\r\n            if (leftDiff + topDiff > 1){\r\n                return;\r\n            }\r\n           \r\n            chip.element.style.left = `${empty.left * chip.cellSize}px`;\r\n            chip.element.style.top = `${empty.top * chip.cellSize}px`;\r\n    \r\n        //задаем координаты ячеек\r\n        const emptyLeft = empty.left; //координаты пустой клетки\r\n        const emptyTop = empty.top;//координаты пустой клетки\r\n        empty.left = chip.left; //текущие координаты ячейки\r\n        empty.top = chip.top; //текущие координаты ячейки\r\n        chip.left = emptyLeft; \r\n        chip.top = emptyTop; //записываем в объект координаты\r\n    \r\n        this.info.counter++;\r\n        this.info.updateCounter();\r\n        \r\n\r\n        if (this.cells.isSorted()){\r\n            let modal = $modal({\r\n                title: 'You WON!',\r\n                content: ['You found the solution and spent: ' + this.info.hour + ' hour ' + this.info.min +  ' min ' + this.info.sec + ' sec ' +  ' and ' +  this.info.counter + ' moves!' +  \r\n                '<img src=\"images/win.jpg\" alt=\"win\" style=\"display: block; height: auto; max-width: 100%;\">'],\r\n                \r\n              });\r\n              modal.show();\r\n              \r\n            //alert(\"You WON! You found the solution and spent: \" + this.info.hour + ' hour ' + this.info.min +  ' min ' + this.info.sec + ' sec ' +  ' and ' +  this.info.counter + \" moves!\");\r\n        }\r\n    }\r\n\r\n} //end class Puzzle\r\n\r\n\r\nlet puzzleGame = new Puzzle();\r\nexport { Puzzle };\r\n\r\n\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./scripts/index.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}